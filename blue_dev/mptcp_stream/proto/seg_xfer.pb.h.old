// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: seg_xfer.proto

#ifndef PROTOBUF_seg_5fxfer_2eproto__INCLUDED
#define PROTOBUF_seg_5fxfer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace seg_xfer {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_seg_5fxfer_2eproto();
void protobuf_AssignDesc_seg_5fxfer_2eproto();
void protobuf_ShutdownFile_seg_5fxfer_2eproto();

class PacketMsg;
class ReassembledPayload;

// ===================================================================

class PacketMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:seg_xfer.PacketMsg) */ {
 public:
  PacketMsg();
  virtual ~PacketMsg();

  PacketMsg(const PacketMsg& from);

  inline PacketMsg& operator=(const PacketMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PacketMsg& default_instance();

  void Swap(PacketMsg* other);

  // implements Message ----------------------------------------------

  inline PacketMsg* New() const { return New(NULL); }

  PacketMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PacketMsg& from);
  void MergeFrom(const PacketMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PacketMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint32 src_ip = 2;
  void clear_src_ip();
  static const int kSrcIpFieldNumber = 2;
  ::google::protobuf::uint32 src_ip() const;
  void set_src_ip(::google::protobuf::uint32 value);

  // optional uint32 src_port = 3;
  void clear_src_port();
  static const int kSrcPortFieldNumber = 3;
  ::google::protobuf::uint32 src_port() const;
  void set_src_port(::google::protobuf::uint32 value);

  // optional uint32 dst_ip = 4;
  void clear_dst_ip();
  static const int kDstIpFieldNumber = 4;
  ::google::protobuf::uint32 dst_ip() const;
  void set_dst_ip(::google::protobuf::uint32 value);

  // optional uint32 dst_port = 5;
  void clear_dst_port();
  static const int kDstPortFieldNumber = 5;
  ::google::protobuf::uint32 dst_port() const;
  void set_dst_port(::google::protobuf::uint32 value);

  // optional uint32 tcp_flags = 6;
  void clear_tcp_flags();
  static const int kTcpFlagsFieldNumber = 6;
  ::google::protobuf::uint32 tcp_flags() const;
  void set_tcp_flags(::google::protobuf::uint32 value);

  // optional uint32 seqno = 7;
  void clear_seqno();
  static const int kSeqnoFieldNumber = 7;
  ::google::protobuf::uint32 seqno() const;
  void set_seqno(::google::protobuf::uint32 value);

  // optional uint32 ackno = 8;
  void clear_ackno();
  static const int kAcknoFieldNumber = 8;
  ::google::protobuf::uint32 ackno() const;
  void set_ackno(::google::protobuf::uint32 value);

  // optional bytes payload = 9;
  void clear_payload();
  static const int kPayloadFieldNumber = 9;
  const ::std::string& payload() const;
  void set_payload(const ::std::string& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  ::std::string* mutable_payload();
  ::std::string* release_payload();
  void set_allocated_payload(::std::string* payload);

  // optional uint32 dsize = 10;
  void clear_dsize();
  static const int kDsizeFieldNumber = 10;
  ::google::protobuf::uint32 dsize() const;
  void set_dsize(::google::protobuf::uint32 value);

  // repeated bytes mptcp_option = 11;
  int mptcp_option_size() const;
  void clear_mptcp_option();
  static const int kMptcpOptionFieldNumber = 11;
  const ::std::string& mptcp_option(int index) const;
  ::std::string* mutable_mptcp_option(int index);
  void set_mptcp_option(int index, const ::std::string& value);
  void set_mptcp_option(int index, const char* value);
  void set_mptcp_option(int index, const void* value, size_t size);
  ::std::string* add_mptcp_option();
  void add_mptcp_option(const ::std::string& value);
  void add_mptcp_option(const char* value);
  void add_mptcp_option(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& mptcp_option() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_mptcp_option();

  // @@protoc_insertion_point(class_scope:seg_xfer.PacketMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 src_ip_;
  ::google::protobuf::uint32 src_port_;
  ::google::protobuf::uint32 dst_ip_;
  ::google::protobuf::uint32 dst_port_;
  ::google::protobuf::uint32 tcp_flags_;
  ::google::protobuf::uint32 seqno_;
  ::google::protobuf::internal::ArenaStringPtr payload_;
  ::google::protobuf::uint32 ackno_;
  ::google::protobuf::uint32 dsize_;
  ::google::protobuf::RepeatedPtrField< ::std::string> mptcp_option_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_seg_5fxfer_2eproto();
  friend void protobuf_AssignDesc_seg_5fxfer_2eproto();
  friend void protobuf_ShutdownFile_seg_5fxfer_2eproto();

  void InitAsDefaultInstance();
  static PacketMsg* default_instance_;
};
// -------------------------------------------------------------------

class ReassembledPayload : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:seg_xfer.ReassembledPayload) */ {
 public:
  ReassembledPayload();
  virtual ~ReassembledPayload();

  ReassembledPayload(const ReassembledPayload& from);

  inline ReassembledPayload& operator=(const ReassembledPayload& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReassembledPayload& default_instance();

  void Swap(ReassembledPayload* other);

  // implements Message ----------------------------------------------

  inline ReassembledPayload* New() const { return New(NULL); }

  ReassembledPayload* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReassembledPayload& from);
  void MergeFrom(const ReassembledPayload& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReassembledPayload* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes payload = 1;
  void clear_payload();
  static const int kPayloadFieldNumber = 1;
  const ::std::string& payload() const;
  void set_payload(const ::std::string& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  ::std::string* mutable_payload();
  ::std::string* release_payload();
  void set_allocated_payload(::std::string* payload);

  // @@protoc_insertion_point(class_scope:seg_xfer.ReassembledPayload)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr payload_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_seg_5fxfer_2eproto();
  friend void protobuf_AssignDesc_seg_5fxfer_2eproto();
  friend void protobuf_ShutdownFile_seg_5fxfer_2eproto();

  void InitAsDefaultInstance();
  static ReassembledPayload* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PacketMsg

// optional string name = 1;
inline void PacketMsg::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PacketMsg::name() const {
  // @@protoc_insertion_point(field_get:seg_xfer.PacketMsg.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PacketMsg::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:seg_xfer.PacketMsg.name)
}
inline void PacketMsg::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:seg_xfer.PacketMsg.name)
}
inline void PacketMsg::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:seg_xfer.PacketMsg.name)
}
inline ::std::string* PacketMsg::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:seg_xfer.PacketMsg.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PacketMsg::release_name() {
  // @@protoc_insertion_point(field_release:seg_xfer.PacketMsg.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PacketMsg::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:seg_xfer.PacketMsg.name)
}

// optional uint32 src_ip = 2;
inline void PacketMsg::clear_src_ip() {
  src_ip_ = 0u;
}
inline ::google::protobuf::uint32 PacketMsg::src_ip() const {
  // @@protoc_insertion_point(field_get:seg_xfer.PacketMsg.src_ip)
  return src_ip_;
}
inline void PacketMsg::set_src_ip(::google::protobuf::uint32 value) {
  
  src_ip_ = value;
  // @@protoc_insertion_point(field_set:seg_xfer.PacketMsg.src_ip)
}

// optional uint32 src_port = 3;
inline void PacketMsg::clear_src_port() {
  src_port_ = 0u;
}
inline ::google::protobuf::uint32 PacketMsg::src_port() const {
  // @@protoc_insertion_point(field_get:seg_xfer.PacketMsg.src_port)
  return src_port_;
}
inline void PacketMsg::set_src_port(::google::protobuf::uint32 value) {
  
  src_port_ = value;
  // @@protoc_insertion_point(field_set:seg_xfer.PacketMsg.src_port)
}

// optional uint32 dst_ip = 4;
inline void PacketMsg::clear_dst_ip() {
  dst_ip_ = 0u;
}
inline ::google::protobuf::uint32 PacketMsg::dst_ip() const {
  // @@protoc_insertion_point(field_get:seg_xfer.PacketMsg.dst_ip)
  return dst_ip_;
}
inline void PacketMsg::set_dst_ip(::google::protobuf::uint32 value) {
  
  dst_ip_ = value;
  // @@protoc_insertion_point(field_set:seg_xfer.PacketMsg.dst_ip)
}

// optional uint32 dst_port = 5;
inline void PacketMsg::clear_dst_port() {
  dst_port_ = 0u;
}
inline ::google::protobuf::uint32 PacketMsg::dst_port() const {
  // @@protoc_insertion_point(field_get:seg_xfer.PacketMsg.dst_port)
  return dst_port_;
}
inline void PacketMsg::set_dst_port(::google::protobuf::uint32 value) {
  
  dst_port_ = value;
  // @@protoc_insertion_point(field_set:seg_xfer.PacketMsg.dst_port)
}

// optional uint32 tcp_flags = 6;
inline void PacketMsg::clear_tcp_flags() {
  tcp_flags_ = 0u;
}
inline ::google::protobuf::uint32 PacketMsg::tcp_flags() const {
  // @@protoc_insertion_point(field_get:seg_xfer.PacketMsg.tcp_flags)
  return tcp_flags_;
}
inline void PacketMsg::set_tcp_flags(::google::protobuf::uint32 value) {
  
  tcp_flags_ = value;
  // @@protoc_insertion_point(field_set:seg_xfer.PacketMsg.tcp_flags)
}

// optional uint32 seqno = 7;
inline void PacketMsg::clear_seqno() {
  seqno_ = 0u;
}
inline ::google::protobuf::uint32 PacketMsg::seqno() const {
  // @@protoc_insertion_point(field_get:seg_xfer.PacketMsg.seqno)
  return seqno_;
}
inline void PacketMsg::set_seqno(::google::protobuf::uint32 value) {
  
  seqno_ = value;
  // @@protoc_insertion_point(field_set:seg_xfer.PacketMsg.seqno)
}

// optional uint32 ackno = 8;
inline void PacketMsg::clear_ackno() {
  ackno_ = 0u;
}
inline ::google::protobuf::uint32 PacketMsg::ackno() const {
  // @@protoc_insertion_point(field_get:seg_xfer.PacketMsg.ackno)
  return ackno_;
}
inline void PacketMsg::set_ackno(::google::protobuf::uint32 value) {
  
  ackno_ = value;
  // @@protoc_insertion_point(field_set:seg_xfer.PacketMsg.ackno)
}

// optional bytes payload = 9;
inline void PacketMsg::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PacketMsg::payload() const {
  // @@protoc_insertion_point(field_get:seg_xfer.PacketMsg.payload)
  return payload_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PacketMsg::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:seg_xfer.PacketMsg.payload)
}
inline void PacketMsg::set_payload(const char* value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:seg_xfer.PacketMsg.payload)
}
inline void PacketMsg::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:seg_xfer.PacketMsg.payload)
}
inline ::std::string* PacketMsg::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:seg_xfer.PacketMsg.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PacketMsg::release_payload() {
  // @@protoc_insertion_point(field_release:seg_xfer.PacketMsg.payload)
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PacketMsg::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:seg_xfer.PacketMsg.payload)
}

// optional uint32 dsize = 10;
inline void PacketMsg::clear_dsize() {
  dsize_ = 0u;
}
inline ::google::protobuf::uint32 PacketMsg::dsize() const {
  // @@protoc_insertion_point(field_get:seg_xfer.PacketMsg.dsize)
  return dsize_;
}
inline void PacketMsg::set_dsize(::google::protobuf::uint32 value) {
  
  dsize_ = value;
  // @@protoc_insertion_point(field_set:seg_xfer.PacketMsg.dsize)
}

// repeated bytes mptcp_option = 11;
inline int PacketMsg::mptcp_option_size() const {
  return mptcp_option_.size();
}
inline void PacketMsg::clear_mptcp_option() {
  mptcp_option_.Clear();
}
inline const ::std::string& PacketMsg::mptcp_option(int index) const {
  // @@protoc_insertion_point(field_get:seg_xfer.PacketMsg.mptcp_option)
  return mptcp_option_.Get(index);
}
inline ::std::string* PacketMsg::mutable_mptcp_option(int index) {
  // @@protoc_insertion_point(field_mutable:seg_xfer.PacketMsg.mptcp_option)
  return mptcp_option_.Mutable(index);
}
inline void PacketMsg::set_mptcp_option(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:seg_xfer.PacketMsg.mptcp_option)
  mptcp_option_.Mutable(index)->assign(value);
}
inline void PacketMsg::set_mptcp_option(int index, const char* value) {
  mptcp_option_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:seg_xfer.PacketMsg.mptcp_option)
}
inline void PacketMsg::set_mptcp_option(int index, const void* value, size_t size) {
  mptcp_option_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:seg_xfer.PacketMsg.mptcp_option)
}
inline ::std::string* PacketMsg::add_mptcp_option() {
  // @@protoc_insertion_point(field_add_mutable:seg_xfer.PacketMsg.mptcp_option)
  return mptcp_option_.Add();
}
inline void PacketMsg::add_mptcp_option(const ::std::string& value) {
  mptcp_option_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:seg_xfer.PacketMsg.mptcp_option)
}
inline void PacketMsg::add_mptcp_option(const char* value) {
  mptcp_option_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:seg_xfer.PacketMsg.mptcp_option)
}
inline void PacketMsg::add_mptcp_option(const void* value, size_t size) {
  mptcp_option_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:seg_xfer.PacketMsg.mptcp_option)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PacketMsg::mptcp_option() const {
  // @@protoc_insertion_point(field_list:seg_xfer.PacketMsg.mptcp_option)
  return mptcp_option_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PacketMsg::mutable_mptcp_option() {
  // @@protoc_insertion_point(field_mutable_list:seg_xfer.PacketMsg.mptcp_option)
  return &mptcp_option_;
}

// -------------------------------------------------------------------

// ReassembledPayload

// optional bytes payload = 1;
inline void ReassembledPayload::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReassembledPayload::payload() const {
  // @@protoc_insertion_point(field_get:seg_xfer.ReassembledPayload.payload)
  return payload_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReassembledPayload::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:seg_xfer.ReassembledPayload.payload)
}
inline void ReassembledPayload::set_payload(const char* value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:seg_xfer.ReassembledPayload.payload)
}
inline void ReassembledPayload::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:seg_xfer.ReassembledPayload.payload)
}
inline ::std::string* ReassembledPayload::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:seg_xfer.ReassembledPayload.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReassembledPayload::release_payload() {
  // @@protoc_insertion_point(field_release:seg_xfer.ReassembledPayload.payload)
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReassembledPayload::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:seg_xfer.ReassembledPayload.payload)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace seg_xfer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_seg_5fxfer_2eproto__INCLUDED
