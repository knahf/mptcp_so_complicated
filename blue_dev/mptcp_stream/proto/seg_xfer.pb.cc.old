// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: seg_xfer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "seg_xfer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace seg_xfer {

namespace {

const ::google::protobuf::Descriptor* PacketMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PacketMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReassembledPayload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReassembledPayload_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_seg_5fxfer_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_seg_5fxfer_2eproto() {
  protobuf_AddDesc_seg_5fxfer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "seg_xfer.proto");
  GOOGLE_CHECK(file != NULL);
  PacketMsg_descriptor_ = file->message_type(0);
  static const int PacketMsg_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketMsg, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketMsg, src_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketMsg, src_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketMsg, dst_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketMsg, dst_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketMsg, tcp_flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketMsg, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketMsg, ackno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketMsg, payload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketMsg, dsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketMsg, mptcp_option_),
  };
  PacketMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PacketMsg_descriptor_,
      PacketMsg::default_instance_,
      PacketMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(PacketMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketMsg, _is_default_instance_));
  ReassembledPayload_descriptor_ = file->message_type(1);
  static const int ReassembledPayload_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReassembledPayload, payload_),
  };
  ReassembledPayload_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReassembledPayload_descriptor_,
      ReassembledPayload::default_instance_,
      ReassembledPayload_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReassembledPayload),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReassembledPayload, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReassembledPayload, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_seg_5fxfer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PacketMsg_descriptor_, &PacketMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReassembledPayload_descriptor_, &ReassembledPayload::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_seg_5fxfer_2eproto() {
  delete PacketMsg::default_instance_;
  delete PacketMsg_reflection_;
  delete ReassembledPayload::default_instance_;
  delete ReassembledPayload_reflection_;
}

void protobuf_AddDesc_seg_5fxfer_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_seg_5fxfer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016seg_xfer.proto\022\010seg_xfer\"\304\001\n\tPacketMsg"
    "\022\014\n\004name\030\001 \001(\t\022\016\n\006src_ip\030\002 \001(\r\022\020\n\010src_po"
    "rt\030\003 \001(\r\022\016\n\006dst_ip\030\004 \001(\r\022\020\n\010dst_port\030\005 \001"
    "(\r\022\021\n\ttcp_flags\030\006 \001(\r\022\r\n\005seqno\030\007 \001(\r\022\r\n\005"
    "ackno\030\010 \001(\r\022\017\n\007payload\030\t \001(\014\022\r\n\005dsize\030\n "
    "\001(\r\022\024\n\014mptcp_option\030\013 \003(\014\"%\n\022Reassembled"
    "Payload\022\017\n\007payload\030\001 \001(\014b\006proto3", 272);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "seg_xfer.proto", &protobuf_RegisterTypes);
  PacketMsg::default_instance_ = new PacketMsg();
  ReassembledPayload::default_instance_ = new ReassembledPayload();
  PacketMsg::default_instance_->InitAsDefaultInstance();
  ReassembledPayload::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_seg_5fxfer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_seg_5fxfer_2eproto {
  StaticDescriptorInitializer_seg_5fxfer_2eproto() {
    protobuf_AddDesc_seg_5fxfer_2eproto();
  }
} static_descriptor_initializer_seg_5fxfer_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PacketMsg::kNameFieldNumber;
const int PacketMsg::kSrcIpFieldNumber;
const int PacketMsg::kSrcPortFieldNumber;
const int PacketMsg::kDstIpFieldNumber;
const int PacketMsg::kDstPortFieldNumber;
const int PacketMsg::kTcpFlagsFieldNumber;
const int PacketMsg::kSeqnoFieldNumber;
const int PacketMsg::kAcknoFieldNumber;
const int PacketMsg::kPayloadFieldNumber;
const int PacketMsg::kDsizeFieldNumber;
const int PacketMsg::kMptcpOptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PacketMsg::PacketMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:seg_xfer.PacketMsg)
}

void PacketMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PacketMsg::PacketMsg(const PacketMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:seg_xfer.PacketMsg)
}

void PacketMsg::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_ip_ = 0u;
  src_port_ = 0u;
  dst_ip_ = 0u;
  dst_port_ = 0u;
  tcp_flags_ = 0u;
  seqno_ = 0u;
  ackno_ = 0u;
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dsize_ = 0u;
}

PacketMsg::~PacketMsg() {
  // @@protoc_insertion_point(destructor:seg_xfer.PacketMsg)
  SharedDtor();
}

void PacketMsg::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PacketMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PacketMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PacketMsg_descriptor_;
}

const PacketMsg& PacketMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_seg_5fxfer_2eproto();
  return *default_instance_;
}

PacketMsg* PacketMsg::default_instance_ = NULL;

PacketMsg* PacketMsg::New(::google::protobuf::Arena* arena) const {
  PacketMsg* n = new PacketMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PacketMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:seg_xfer.PacketMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PacketMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PacketMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(src_ip_, seqno_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ackno_ = 0u;
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dsize_ = 0u;

#undef ZR_HELPER_
#undef ZR_

  mptcp_option_.Clear();
}

bool PacketMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:seg_xfer.PacketMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "seg_xfer.PacketMsg.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_src_ip;
        break;
      }

      // optional uint32 src_ip = 2;
      case 2: {
        if (tag == 16) {
         parse_src_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_ip_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_src_port;
        break;
      }

      // optional uint32 src_port = 3;
      case 3: {
        if (tag == 24) {
         parse_src_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dst_ip;
        break;
      }

      // optional uint32 dst_ip = 4;
      case 4: {
        if (tag == 32) {
         parse_dst_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dst_ip_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dst_port;
        break;
      }

      // optional uint32 dst_port = 5;
      case 5: {
        if (tag == 40) {
         parse_dst_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dst_port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_tcp_flags;
        break;
      }

      // optional uint32 tcp_flags = 6;
      case 6: {
        if (tag == 48) {
         parse_tcp_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcp_flags_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_seqno;
        break;
      }

      // optional uint32 seqno = 7;
      case 7: {
        if (tag == 56) {
         parse_seqno:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ackno;
        break;
      }

      // optional uint32 ackno = 8;
      case 8: {
        if (tag == 64) {
         parse_ackno:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ackno_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_payload;
        break;
      }

      // optional bytes payload = 9;
      case 9: {
        if (tag == 74) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_dsize;
        break;
      }

      // optional uint32 dsize = 10;
      case 10: {
        if (tag == 80) {
         parse_dsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dsize_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_mptcp_option;
        break;
      }

      // repeated bytes mptcp_option = 11;
      case 11: {
        if (tag == 90) {
         parse_mptcp_option:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_mptcp_option()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_mptcp_option;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:seg_xfer.PacketMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:seg_xfer.PacketMsg)
  return false;
#undef DO_
}

void PacketMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:seg_xfer.PacketMsg)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "seg_xfer.PacketMsg.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 src_ip = 2;
  if (this->src_ip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->src_ip(), output);
  }

  // optional uint32 src_port = 3;
  if (this->src_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->src_port(), output);
  }

  // optional uint32 dst_ip = 4;
  if (this->dst_ip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dst_ip(), output);
  }

  // optional uint32 dst_port = 5;
  if (this->dst_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->dst_port(), output);
  }

  // optional uint32 tcp_flags = 6;
  if (this->tcp_flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->tcp_flags(), output);
  }

  // optional uint32 seqno = 7;
  if (this->seqno() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->seqno(), output);
  }

  // optional uint32 ackno = 8;
  if (this->ackno() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ackno(), output);
  }

  // optional bytes payload = 9;
  if (this->payload().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->payload(), output);
  }

  // optional uint32 dsize = 10;
  if (this->dsize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->dsize(), output);
  }

  // repeated bytes mptcp_option = 11;
  for (int i = 0; i < this->mptcp_option_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->mptcp_option(i), output);
  }

  // @@protoc_insertion_point(serialize_end:seg_xfer.PacketMsg)
}

::google::protobuf::uint8* PacketMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:seg_xfer.PacketMsg)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "seg_xfer.PacketMsg.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 src_ip = 2;
  if (this->src_ip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->src_ip(), target);
  }

  // optional uint32 src_port = 3;
  if (this->src_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->src_port(), target);
  }

  // optional uint32 dst_ip = 4;
  if (this->dst_ip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dst_ip(), target);
  }

  // optional uint32 dst_port = 5;
  if (this->dst_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->dst_port(), target);
  }

  // optional uint32 tcp_flags = 6;
  if (this->tcp_flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->tcp_flags(), target);
  }

  // optional uint32 seqno = 7;
  if (this->seqno() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->seqno(), target);
  }

  // optional uint32 ackno = 8;
  if (this->ackno() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ackno(), target);
  }

  // optional bytes payload = 9;
  if (this->payload().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->payload(), target);
  }

  // optional uint32 dsize = 10;
  if (this->dsize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->dsize(), target);
  }

  // repeated bytes mptcp_option = 11;
  for (int i = 0; i < this->mptcp_option_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(11, this->mptcp_option(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:seg_xfer.PacketMsg)
  return target;
}

int PacketMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:seg_xfer.PacketMsg)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional uint32 src_ip = 2;
  if (this->src_ip() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->src_ip());
  }

  // optional uint32 src_port = 3;
  if (this->src_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->src_port());
  }

  // optional uint32 dst_ip = 4;
  if (this->dst_ip() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dst_ip());
  }

  // optional uint32 dst_port = 5;
  if (this->dst_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dst_port());
  }

  // optional uint32 tcp_flags = 6;
  if (this->tcp_flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tcp_flags());
  }

  // optional uint32 seqno = 7;
  if (this->seqno() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seqno());
  }

  // optional uint32 ackno = 8;
  if (this->ackno() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ackno());
  }

  // optional bytes payload = 9;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->payload());
  }

  // optional uint32 dsize = 10;
  if (this->dsize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dsize());
  }

  // repeated bytes mptcp_option = 11;
  total_size += 1 * this->mptcp_option_size();
  for (int i = 0; i < this->mptcp_option_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->mptcp_option(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PacketMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:seg_xfer.PacketMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PacketMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PacketMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:seg_xfer.PacketMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:seg_xfer.PacketMsg)
    MergeFrom(*source);
  }
}

void PacketMsg::MergeFrom(const PacketMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:seg_xfer.PacketMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  mptcp_option_.MergeFrom(from.mptcp_option_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.src_ip() != 0) {
    set_src_ip(from.src_ip());
  }
  if (from.src_port() != 0) {
    set_src_port(from.src_port());
  }
  if (from.dst_ip() != 0) {
    set_dst_ip(from.dst_ip());
  }
  if (from.dst_port() != 0) {
    set_dst_port(from.dst_port());
  }
  if (from.tcp_flags() != 0) {
    set_tcp_flags(from.tcp_flags());
  }
  if (from.seqno() != 0) {
    set_seqno(from.seqno());
  }
  if (from.ackno() != 0) {
    set_ackno(from.ackno());
  }
  if (from.payload().size() > 0) {

    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  if (from.dsize() != 0) {
    set_dsize(from.dsize());
  }
}

void PacketMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:seg_xfer.PacketMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PacketMsg::CopyFrom(const PacketMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seg_xfer.PacketMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketMsg::IsInitialized() const {

  return true;
}

void PacketMsg::Swap(PacketMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PacketMsg::InternalSwap(PacketMsg* other) {
  name_.Swap(&other->name_);
  std::swap(src_ip_, other->src_ip_);
  std::swap(src_port_, other->src_port_);
  std::swap(dst_ip_, other->dst_ip_);
  std::swap(dst_port_, other->dst_port_);
  std::swap(tcp_flags_, other->tcp_flags_);
  std::swap(seqno_, other->seqno_);
  std::swap(ackno_, other->ackno_);
  payload_.Swap(&other->payload_);
  std::swap(dsize_, other->dsize_);
  mptcp_option_.UnsafeArenaSwap(&other->mptcp_option_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PacketMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PacketMsg_descriptor_;
  metadata.reflection = PacketMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PacketMsg

// optional string name = 1;
void PacketMsg::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PacketMsg::name() const {
  // @@protoc_insertion_point(field_get:seg_xfer.PacketMsg.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketMsg::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:seg_xfer.PacketMsg.name)
}
 void PacketMsg::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:seg_xfer.PacketMsg.name)
}
 void PacketMsg::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:seg_xfer.PacketMsg.name)
}
 ::std::string* PacketMsg::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:seg_xfer.PacketMsg.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PacketMsg::release_name() {
  // @@protoc_insertion_point(field_release:seg_xfer.PacketMsg.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketMsg::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:seg_xfer.PacketMsg.name)
}

// optional uint32 src_ip = 2;
void PacketMsg::clear_src_ip() {
  src_ip_ = 0u;
}
 ::google::protobuf::uint32 PacketMsg::src_ip() const {
  // @@protoc_insertion_point(field_get:seg_xfer.PacketMsg.src_ip)
  return src_ip_;
}
 void PacketMsg::set_src_ip(::google::protobuf::uint32 value) {
  
  src_ip_ = value;
  // @@protoc_insertion_point(field_set:seg_xfer.PacketMsg.src_ip)
}

// optional uint32 src_port = 3;
void PacketMsg::clear_src_port() {
  src_port_ = 0u;
}
 ::google::protobuf::uint32 PacketMsg::src_port() const {
  // @@protoc_insertion_point(field_get:seg_xfer.PacketMsg.src_port)
  return src_port_;
}
 void PacketMsg::set_src_port(::google::protobuf::uint32 value) {
  
  src_port_ = value;
  // @@protoc_insertion_point(field_set:seg_xfer.PacketMsg.src_port)
}

// optional uint32 dst_ip = 4;
void PacketMsg::clear_dst_ip() {
  dst_ip_ = 0u;
}
 ::google::protobuf::uint32 PacketMsg::dst_ip() const {
  // @@protoc_insertion_point(field_get:seg_xfer.PacketMsg.dst_ip)
  return dst_ip_;
}
 void PacketMsg::set_dst_ip(::google::protobuf::uint32 value) {
  
  dst_ip_ = value;
  // @@protoc_insertion_point(field_set:seg_xfer.PacketMsg.dst_ip)
}

// optional uint32 dst_port = 5;
void PacketMsg::clear_dst_port() {
  dst_port_ = 0u;
}
 ::google::protobuf::uint32 PacketMsg::dst_port() const {
  // @@protoc_insertion_point(field_get:seg_xfer.PacketMsg.dst_port)
  return dst_port_;
}
 void PacketMsg::set_dst_port(::google::protobuf::uint32 value) {
  
  dst_port_ = value;
  // @@protoc_insertion_point(field_set:seg_xfer.PacketMsg.dst_port)
}

// optional uint32 tcp_flags = 6;
void PacketMsg::clear_tcp_flags() {
  tcp_flags_ = 0u;
}
 ::google::protobuf::uint32 PacketMsg::tcp_flags() const {
  // @@protoc_insertion_point(field_get:seg_xfer.PacketMsg.tcp_flags)
  return tcp_flags_;
}
 void PacketMsg::set_tcp_flags(::google::protobuf::uint32 value) {
  
  tcp_flags_ = value;
  // @@protoc_insertion_point(field_set:seg_xfer.PacketMsg.tcp_flags)
}

// optional uint32 seqno = 7;
void PacketMsg::clear_seqno() {
  seqno_ = 0u;
}
 ::google::protobuf::uint32 PacketMsg::seqno() const {
  // @@protoc_insertion_point(field_get:seg_xfer.PacketMsg.seqno)
  return seqno_;
}
 void PacketMsg::set_seqno(::google::protobuf::uint32 value) {
  
  seqno_ = value;
  // @@protoc_insertion_point(field_set:seg_xfer.PacketMsg.seqno)
}

// optional uint32 ackno = 8;
void PacketMsg::clear_ackno() {
  ackno_ = 0u;
}
 ::google::protobuf::uint32 PacketMsg::ackno() const {
  // @@protoc_insertion_point(field_get:seg_xfer.PacketMsg.ackno)
  return ackno_;
}
 void PacketMsg::set_ackno(::google::protobuf::uint32 value) {
  
  ackno_ = value;
  // @@protoc_insertion_point(field_set:seg_xfer.PacketMsg.ackno)
}

// optional bytes payload = 9;
void PacketMsg::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PacketMsg::payload() const {
  // @@protoc_insertion_point(field_get:seg_xfer.PacketMsg.payload)
  return payload_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketMsg::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:seg_xfer.PacketMsg.payload)
}
 void PacketMsg::set_payload(const char* value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:seg_xfer.PacketMsg.payload)
}
 void PacketMsg::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:seg_xfer.PacketMsg.payload)
}
 ::std::string* PacketMsg::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:seg_xfer.PacketMsg.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PacketMsg::release_payload() {
  // @@protoc_insertion_point(field_release:seg_xfer.PacketMsg.payload)
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketMsg::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:seg_xfer.PacketMsg.payload)
}

// optional uint32 dsize = 10;
void PacketMsg::clear_dsize() {
  dsize_ = 0u;
}
 ::google::protobuf::uint32 PacketMsg::dsize() const {
  // @@protoc_insertion_point(field_get:seg_xfer.PacketMsg.dsize)
  return dsize_;
}
 void PacketMsg::set_dsize(::google::protobuf::uint32 value) {
  
  dsize_ = value;
  // @@protoc_insertion_point(field_set:seg_xfer.PacketMsg.dsize)
}

// repeated bytes mptcp_option = 11;
int PacketMsg::mptcp_option_size() const {
  return mptcp_option_.size();
}
void PacketMsg::clear_mptcp_option() {
  mptcp_option_.Clear();
}
 const ::std::string& PacketMsg::mptcp_option(int index) const {
  // @@protoc_insertion_point(field_get:seg_xfer.PacketMsg.mptcp_option)
  return mptcp_option_.Get(index);
}
 ::std::string* PacketMsg::mutable_mptcp_option(int index) {
  // @@protoc_insertion_point(field_mutable:seg_xfer.PacketMsg.mptcp_option)
  return mptcp_option_.Mutable(index);
}
 void PacketMsg::set_mptcp_option(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:seg_xfer.PacketMsg.mptcp_option)
  mptcp_option_.Mutable(index)->assign(value);
}
 void PacketMsg::set_mptcp_option(int index, const char* value) {
  mptcp_option_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:seg_xfer.PacketMsg.mptcp_option)
}
 void PacketMsg::set_mptcp_option(int index, const void* value, size_t size) {
  mptcp_option_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:seg_xfer.PacketMsg.mptcp_option)
}
 ::std::string* PacketMsg::add_mptcp_option() {
  // @@protoc_insertion_point(field_add_mutable:seg_xfer.PacketMsg.mptcp_option)
  return mptcp_option_.Add();
}
 void PacketMsg::add_mptcp_option(const ::std::string& value) {
  mptcp_option_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:seg_xfer.PacketMsg.mptcp_option)
}
 void PacketMsg::add_mptcp_option(const char* value) {
  mptcp_option_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:seg_xfer.PacketMsg.mptcp_option)
}
 void PacketMsg::add_mptcp_option(const void* value, size_t size) {
  mptcp_option_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:seg_xfer.PacketMsg.mptcp_option)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
PacketMsg::mptcp_option() const {
  // @@protoc_insertion_point(field_list:seg_xfer.PacketMsg.mptcp_option)
  return mptcp_option_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
PacketMsg::mutable_mptcp_option() {
  // @@protoc_insertion_point(field_mutable_list:seg_xfer.PacketMsg.mptcp_option)
  return &mptcp_option_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReassembledPayload::kPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReassembledPayload::ReassembledPayload()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:seg_xfer.ReassembledPayload)
}

void ReassembledPayload::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ReassembledPayload::ReassembledPayload(const ReassembledPayload& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:seg_xfer.ReassembledPayload)
}

void ReassembledPayload::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ReassembledPayload::~ReassembledPayload() {
  // @@protoc_insertion_point(destructor:seg_xfer.ReassembledPayload)
  SharedDtor();
}

void ReassembledPayload::SharedDtor() {
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ReassembledPayload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReassembledPayload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReassembledPayload_descriptor_;
}

const ReassembledPayload& ReassembledPayload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_seg_5fxfer_2eproto();
  return *default_instance_;
}

ReassembledPayload* ReassembledPayload::default_instance_ = NULL;

ReassembledPayload* ReassembledPayload::New(::google::protobuf::Arena* arena) const {
  ReassembledPayload* n = new ReassembledPayload;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReassembledPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:seg_xfer.ReassembledPayload)
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ReassembledPayload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:seg_xfer.ReassembledPayload)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes payload = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:seg_xfer.ReassembledPayload)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:seg_xfer.ReassembledPayload)
  return false;
#undef DO_
}

void ReassembledPayload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:seg_xfer.ReassembledPayload)
  // optional bytes payload = 1;
  if (this->payload().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->payload(), output);
  }

  // @@protoc_insertion_point(serialize_end:seg_xfer.ReassembledPayload)
}

::google::protobuf::uint8* ReassembledPayload::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:seg_xfer.ReassembledPayload)
  // optional bytes payload = 1;
  if (this->payload().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->payload(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:seg_xfer.ReassembledPayload)
  return target;
}

int ReassembledPayload::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:seg_xfer.ReassembledPayload)
  int total_size = 0;

  // optional bytes payload = 1;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->payload());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReassembledPayload::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:seg_xfer.ReassembledPayload)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReassembledPayload* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReassembledPayload>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:seg_xfer.ReassembledPayload)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:seg_xfer.ReassembledPayload)
    MergeFrom(*source);
  }
}

void ReassembledPayload::MergeFrom(const ReassembledPayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:seg_xfer.ReassembledPayload)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.payload().size() > 0) {

    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
}

void ReassembledPayload::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:seg_xfer.ReassembledPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReassembledPayload::CopyFrom(const ReassembledPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seg_xfer.ReassembledPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReassembledPayload::IsInitialized() const {

  return true;
}

void ReassembledPayload::Swap(ReassembledPayload* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReassembledPayload::InternalSwap(ReassembledPayload* other) {
  payload_.Swap(&other->payload_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReassembledPayload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReassembledPayload_descriptor_;
  metadata.reflection = ReassembledPayload_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReassembledPayload

// optional bytes payload = 1;
void ReassembledPayload::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ReassembledPayload::payload() const {
  // @@protoc_insertion_point(field_get:seg_xfer.ReassembledPayload.payload)
  return payload_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReassembledPayload::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:seg_xfer.ReassembledPayload.payload)
}
 void ReassembledPayload::set_payload(const char* value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:seg_xfer.ReassembledPayload.payload)
}
 void ReassembledPayload::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:seg_xfer.ReassembledPayload.payload)
}
 ::std::string* ReassembledPayload::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:seg_xfer.ReassembledPayload.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReassembledPayload::release_payload() {
  // @@protoc_insertion_point(field_release:seg_xfer.ReassembledPayload.payload)
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReassembledPayload::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:seg_xfer.ReassembledPayload.payload)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace seg_xfer

// @@protoc_insertion_point(global_scope)
